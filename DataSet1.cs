//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TestAspnetHost {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSet1 : DataSet {
        
        private classidDataTable tableclassid;
        
        public DataSet1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSet1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["classid"] != null)) {
                    this.Tables.Add(new classidDataTable(ds.Tables["classid"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public classidDataTable classid {
            get {
                return this.tableclassid;
            }
        }
        
        public override DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["classid"] != null)) {
                this.Tables.Add(new classidDataTable(ds.Tables["classid"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableclassid = ((classidDataTable)(this.Tables["classid"]));
            if ((this.tableclassid != null)) {
                this.tableclassid.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSet1.xsd";
            this.Locale = new System.Globalization.CultureInfo("zh-CN");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableclassid = new classidDataTable();
            this.Tables.Add(this.tableclassid);
        }
        
        private bool ShouldSerializeclassid() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void classidRowChangeEventHandler(object sender, classidRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class classidDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columncid;
            
            private DataColumn columnname;
            
            private DataColumn columnename;
            
            internal classidDataTable() : 
                    base("classid") {
                this.InitClass();
            }
            
            internal classidDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn cidColumn {
                get {
                    return this.columncid;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn enameColumn {
                get {
                    return this.columnename;
                }
            }
            
            public classidRow this[int index] {
                get {
                    return ((classidRow)(this.Rows[index]));
                }
            }
            
            public event classidRowChangeEventHandler classidRowChanged;
            
            public event classidRowChangeEventHandler classidRowChanging;
            
            public event classidRowChangeEventHandler classidRowDeleted;
            
            public event classidRowChangeEventHandler classidRowDeleting;
            
            public void AddclassidRow(classidRow row) {
                this.Rows.Add(row);
            }
            
            public classidRow AddclassidRow(System.Byte cid, string name, string ename) {
                classidRow rowclassidRow = ((classidRow)(this.NewRow()));
                rowclassidRow.ItemArray = new object[] {
                        cid,
                        name,
                        ename};
                this.Rows.Add(rowclassidRow);
                return rowclassidRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                classidDataTable cln = ((classidDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new classidDataTable();
            }
            
            internal void InitVars() {
                this.columncid = this.Columns["cid"];
                this.columnname = this.Columns["name"];
                this.columnename = this.Columns["ename"];
            }
            
            private void InitClass() {
                this.columncid = new DataColumn("cid", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncid);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnname);
                this.columnename = new DataColumn("ename", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnename);
                this.columncid.AllowDBNull = false;
                this.columnname.AllowDBNull = false;
                this.columnename.AllowDBNull = false;
            }
            
            public classidRow NewclassidRow() {
                return ((classidRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new classidRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(classidRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.classidRowChanged != null)) {
                    this.classidRowChanged(this, new classidRowChangeEvent(((classidRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.classidRowChanging != null)) {
                    this.classidRowChanging(this, new classidRowChangeEvent(((classidRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.classidRowDeleted != null)) {
                    this.classidRowDeleted(this, new classidRowChangeEvent(((classidRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.classidRowDeleting != null)) {
                    this.classidRowDeleting(this, new classidRowChangeEvent(((classidRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveclassidRow(classidRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class classidRow : DataRow {
            
            private classidDataTable tableclassid;
            
            internal classidRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableclassid = ((classidDataTable)(this.Table));
            }
            
            public System.Byte cid {
                get {
                    return ((System.Byte)(this[this.tableclassid.cidColumn]));
                }
                set {
                    this[this.tableclassid.cidColumn] = value;
                }
            }
            
            public string name {
                get {
                    return ((string)(this[this.tableclassid.nameColumn]));
                }
                set {
                    this[this.tableclassid.nameColumn] = value;
                }
            }
            
            public string ename {
                get {
                    return ((string)(this[this.tableclassid.enameColumn]));
                }
                set {
                    this[this.tableclassid.enameColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class classidRowChangeEvent : EventArgs {
            
            private classidRow eventRow;
            
            private DataRowAction eventAction;
            
            public classidRowChangeEvent(classidRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public classidRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
